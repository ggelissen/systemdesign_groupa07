from csv import reader
import scipy as sp
from matplotlib import pyplot as plt
from scipy import integrate
import numpy as np

rho = 1.225 #0.324438
v = 242.958
q = 0.5*rho*(v**2)
halfspan = 33.5
n = 2.5
sf = 1.5
b = 67  # m
Ww = 38229.5 / 2  # kg
Wf = (125407 + 522.9) / 2  # kg
Weng = 6033  # kg
Wlg = 11383.7 / 2
grav = 9.81  # m/s^2
T = 0
h = 2.127
engcenter = 1.43
taper = 0.28
d2r = np.pi/180
S = 574.3 #m^2
sweep_LE = 37.12 #deg
cr = 13.4 #m

CL0 = 0.04647
CL10 = 0.97586
CLD = 0.174647669

E = 68.9 * 10 ** 9
G = 26 * 10 ** 9
poisson = 0.33
t_c = 0.113

# Create arrays for the values in the CSV file
ylst0 = np.array([])
chordlst0 = np.array([])
Ailst0 = np.array([])
Cllst0 = np.array([])
ICdlst0 = np.array([])
Cmc4lst0 = np.array([])

ylst10 = np.array([])
chordlst10 = np.array([])
Ailst10 = np.array([])
Cllst10 = np.array([])
ICdlst10 = np.array([])
Cmc4lst10 = np.array([])

# Read the CSV file
data0 = []
data10 = []
with open('A07csv0.csv', 'r') as file:
    csv_reader = reader(file)
    for row in csv_reader:
        data0.append(row)

with open('A07csv10.csv', 'r') as file2:
    csv_reader = reader(file2)
    for row in csv_reader:
        data10.append(row)

# Append correct values from csv_reader to arrays
for row in data0[51:81]:      # Range can be adjusted here!
    ylst0 = np.append(ylst0, float(row[0]))
    chordlst0 = np.append(chordlst0, float(row[1]))
    Ailst0 = np.append(Ailst0, float(row[2]))
    Cllst0 = np.append(Cllst0, float(row[3]))
    ICdlst0 = np.append(ICdlst0, float(row[5]))
    Cmc4lst0 = np.append(Cmc4lst0, float(row[7]))

for row in data10[51:81]:      # Range can be adjusted here!
    ylst10 = np.append(ylst10, float(row[0]))
    chordlst10 = np.append(chordlst10, float(row[1]))
    Ailst10 = np.append(Ailst10, float(row[2]))
    Cllst10 = np.append(Cllst10, float(row[3]))
    ICdlst10 = np.append(ICdlst10, float(row[5]))
    Cmc4lst10 = np.append(Cmc4lst10, float(row[7]))

# Functions to interpolate the values
def yCl(y, Cl):
    return sp.interpolate.interp1d(y,Cl,kind='cubic',fill_value="extrapolate")

def ychord(y, chord):
    return sp.interpolate.interp1d(y,chord,kind='cubic',fill_value="extrapolate")

def yICd(y, ICd):
    return sp.interpolate.interp1d(y,ICd,kind='cubic',fill_value="extrapolate")

def yCmc4(y, cmc4):
    return sp.interpolate.interp1d(y,cmc4,kind='cubic',fill_value="extrapolate")

# Define set of values for y
yvalues = np.arange(0, halfspan, 0.01)
yCl_result0 = yCl(ylst0, Cllst0)
ychord_result0 = ychord(ylst0, chordlst0)
yICd_result0 = yICd(ylst0, ICdlst0)
yCmc4_result0 = yCmc4(ylst0, Cmc4lst0)

yCl_result10 = yCl(ylst10, Cllst10)
ychord_result10 = ychord(ylst10, chordlst10)
yICd_result10 = yICd(ylst10, ICdlst10)
yCmc4_result10 = yCmc4(ylst10, Cmc4lst10)

# finding entry in list closest to val
def closest(lst, val):
    lst = np.asarray(lst)
    idx = (np.abs(lst - val)).argmin()
    return lst[idx]

# functions to define all loading distribution (ie decreasing triangular shape for dry, const for fuel)
'''engload = []
for element in yvalues:
    if element != closest(yvalues, (b / 2) * 0.35):
        engload.append(0)
    if element == closest(yvalues, (b / 2) * 0.35):
        engload.append(Weng * grav)
'''
def cts_loaddistr(y):
    if y == 0:
        f = g = 0
    if y != 0:
        c = 4 * Ww * grav / b
        a = (-1 * (Ww * grav * 8)) / (b ** 2)
        f = a * y + c
    if y <= b / 4 and y > 0:
        h = 8 * Wf * (1 - 1/2.56) * grav / b
        d = 8 * Wf * grav / (2.56 * b)
        m = (d - h) / (b / 4)
        g = h + m * y
    if y > b / 4:
        g = 0
    if y == 5.8:
        l = Wlg * grav
    else:
        l = 0
    if y == 12:
        e = Weng * grav
    else:
        e = 0
    return f + g + e + l #f is structural weight, g is fuel weight

# Angle of Attack
alpha_sin = (CLD-CL0)/(CL10-CL0) * np.sin(10*np.pi/180)
alpha = np.arcsin(alpha_sin)

# Functions to calculate distributed load an point load
def Ldistribution0(x):
    return yCl_result0(x) * q * ychord_result0(x)
liftdistributionlst0 = np.array([])

def Ldistribution10(x):
    return yCl_result10(x) * q * ychord_result10(x)
liftdistributionlst10 = np.array([])

def LdistributionD(x):
    return (Ldistribution0(x) + ((CLD - CL0)/(CL10 - CL0)) * (Ldistribution10(x) - Ldistribution0(x))) * np.cos(alpha)
liftdistributionlst = np.array([])
for element in yvalues:
    liftdistributionlst = np.append(liftdistributionlst, (((LdistributionD(element)*n)) - cts_loaddistr(element)) * sf)


def sheardistribution(y):
    shear = integrate.cumtrapz(liftdistributionlst, y, initial=0)
    sheardistributionlst = np.flip(shear)
    return sheardistributionlst

def momentdistribution(y):
    shear = integrate.cumtrapz(liftdistributionlst, y, initial=0)
    moment = integrate.cumtrapz(shear, yvalues, initial=0)
    momentdistributionlst = -1 * np.flip(moment)
    return momentdistributionlst

def chord(y):
    return cr - cr*(1-taper)*(y/(b/2))

sheardist = sheardistribution(yvalues)
sheardist[0] = 0

""" buckling stuff here """

tsk = float(input("Enter the skin thickness[mm]: ")) * (10 ** -3)
nr = int(input("Enter the amount of ribs: "))
strnr = int(input("Enter the amount of L-type stringers: "))
tstr = int(input("Enter the thickness of the stringers[mm]: ")) * (10 ** -3)
strfl = int(input("Enter the length of the stringer flanges[mm]: ")) * (10 ** -3)

## In formula in literature, b is used. Here a is used as not to confuse b for span.
a = (b / 2) / nr  ## assuming equal spacing

kclst = [15, 12, 10.7, 8.6, 8, 7.8, 7.4, 7.3, 7.2]
a_hlst_kc = [0.7, 0.8, 0.9, 1.5, 2, 2.5, 3, 3.5, 4]

interpolation_function = sp.interpolate.interp1d(a_hlst_kc, kclst, kind='cubic', fill_value='extrapolate')
a_h_interp = np.linspace(0.7, 4, 331)
ks_interp = interpolation_function(a_h_interp)
distr_kc = []
tolerance = 1e-10


def sigma_cr(t, y):
    h = chord(y) * 0.5
    if a <= h:
        current_a_h = round(h / a, 2)  # h is the chord, a is the rib pitch
    elif h < a:
        current_a_h = round(a / h, 2)
    index_match = np.where(np.abs(a_h_interp - current_a_h) < tolerance)[0]
    if index_match.size > 0 and current_a_h < 4:
        kc = float(ks_interp[index_match[0]])
        distr_kc.append(kc)
    else:
        kc = 7.2
        distr_kc.append(ks)
    if a <= h:  
        return ((E * 7 * np.pi ** 2) / (12 * (1 - poisson ** 2))) * (t / a) ** 2
    elif h < a:  
        return ((E * 7 * np.pi ** 2) / (12 * (1 - poisson ** 2))) * (t / h) ** 2

print(sigma_cr(tsk,0.9))

def sigma(moment, tsk, y):
    h = chord(y)
    # Moment of inertia of skin plate (cross-section)
    m_inertia = (h * (tsk**3))/12
    # Stringer inertia: Parallel axis theorem, modelled as 1 large square minus 1 smaller square
    stringer_inertiaL = (strfl*(strfl ** 3))/12 + (strfl*strfl) * (((tsk + strfl)/2) ** 2)
    stringer_inertiaS = ((strfl - tstr)*((strfl - tstr) ** 3))/12 + ((strfl - tstr)*(strfl - tstr)) * (((tsk + strfl + tstr)/2) ** 2)
    stringer_inertia = stringer_inertiaL - stringer_inertiaS
    return(moment*(tsk/2))/(m_inertia + (strnr * stringer_inertia))
print(sigma(-1.54E08, tsk, 1.2))
'''
momentlst = momentdistribution(yvalues)
sigma_cr_lst = []
sigma_lst = []
safetyfactor = []

for i in range(3350):
    moment_span_location = -1*momentlst[i]
    sigma_cr_lst.append(sigma_cr(tsk, i/100))
    sigma_lst.append(sigma(moment_span_location, tsk, i/100))
    print(sigma(moment_span_location, tsk, i/100)/sigma_cr(tsk, i/100))
    safetyfactor.append(sigma(moment_span_location, tsk, i/100)/sigma_cr(tsk, i/100))

#plt.plot(yvalues, sigma_cr_lst, "b")
#plt.plot(yvalues, sigma_lst, "r")
plt.plot(yvalues, safetyfactor)
plt.show()
'''
